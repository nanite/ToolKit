plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

def generatedResources = file("src/generated")

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "toolkit-common.mixins.json"
        mixinConfig "toolkit.mixins.json"
    }
}

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    def forgeVersion = rootProject.forge_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "forgeversion": forgeVersion,
                "forgebase": forgeBase,
                "mcversion": rootProject.minecraft_version,
                "archversion": rootProject.architectury_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier(null)
    setArchivesBaseName("${rootProject.archives_base_name}-${project.name}")
}

jar {
    setArchiveClassifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.archivesBaseName}-${project.name}"
            from components.java
        }
    }
}