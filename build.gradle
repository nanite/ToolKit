import groovy.json.JsonSlurper

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.10-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    publishing {
        repositories {
            if (providers.environmentVariable("NANITE_TOKEN").isPresent()) {
                maven {
                    url "https://maven.nanite.dev/releases"
                    credentials {
                        username = "nanite"
                        password = providers.environmentVariable("NANITE_TOKEN").get()
                    }
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"


    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {

    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FABRIC][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("fabric")
    }

    def neoForge = publishOptions {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[NEOFORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForge)
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
        modrinth("modrinthFabric") {
            from(modrinthOptions, fabricOptions)
            requires {
                slug = "fabric-api"
            }
        }

        modrinth("modrinthNeoforge") {
            from(modrinthOptions, neoForge)
        }
    }
}

tasks.register("updateModVersion") {
    doLast {
        def gradleFile = file("gradle.properties")
        def text = gradleFile.text

        def minecraftVersion = getModPrefixVersion()
        def modVersion = text.find("mod_version=(.*)")

        if (modVersion == null) {
            throw new IllegalStateException("Could not find mod_version in gradle.properties")
        }

        modVersion = modVersion.split("=")[1]
        def remainingVersion = modVersion.tokenize(".").drop(1).join(".")
        def newVersion = "${minecraftVersion}.${remainingVersion}"

        text = text.replace("mod_version=${modVersion}", "mod_version=${newVersion}")
        gradleFile.text = text

        println "Updated mod version to ${newVersion} from ${modVersion}"
    }
}

def getModPrefixVersion() {
    def url = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json"
    def json = new JsonSlurper().parseText(url.toURL().text)

    def versions = json.versions
    versions = versions.reverse() // We want the oldest version first
    versions = versions.findAll { it.type == "release" } // We only want releases

    def incrementalVersion = 0
    for (version in versions) {
        if (version.id == minecraft_version) {
            break
        }

        incrementalVersion++
    }

    return incrementalVersion
}
